{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Litan",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#entity"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.litan",
					"match": "\\b(return|var|except|def|yield)\\b"
				},
				{
					"name": "keyword.directives.litan",
					"match": "\\B(#import|#include)\\b"
				},
				{
					"name": "keyword.conditional.litan",
					"match": "\\b(if|else|case|conditional|switch)\\b"
				},
				{
					"name" : "keyword.operator.litan",
					"match" : "->|=>|="
				},
				{
					"name" : "keyword.loops.litan",
					"match" : "\\b(while|for)\\b"
				},
				{
					"name" : "keyword.operator.arithmetic.litan",
					"match" : "\\+|-|\\*|\\/|%|\\*\\*"
				},
				{
					"name" : "keyword.operator.compare.litan",
					"match" : "<=|>=|<=>|==|!=|<|>"
				},
				{
					"name" : "keyword.operator.logical.litan",
					"match" : "&&|\\|\\||!"
				},
				{
					"name" : "keyword.operator.bitwise.litan",
					"match" : "&|\\||>>|<<|\\^|~"
				},
				{
					"name" : "keyword.operator.conditional.litan",
					"match" : "\\?\\?|\\?|(?<!:)\\:(?!:)"
				}
			]
		},
		"storage" : {
			"patterns" : [
				{
					"name": "storage.function.litan",
					"match": "\\b(function)\\b"
				},
				{
					"name": "storage.lambda.litan",
					"match": "\\b(lambda)\\b"
				},
				{
					"name" : "storage.namespace.litan",
					"match" : "\\b(namespace)\\b"
				}
			]
		},
		"comments" : {
			"patterns": [
				{
					"name": "comment.line.litan",
					"begin": "//",
					"end": "\\n"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name" : "constant.language.litan",
					"match": "\\b(null|true|false)\\b"
				},
				{
					"name" : "constant.numeric.dec.litan",
					"match": "\\b[-]?[0-9]+(\\.[0-9]+)?\\b"
				},
				{
					"name" : "constant.numeric.bin.litan",
					"match": "\\b0b(0|1)*\\b"
				},
				{
					"name" : "constant.numeric.hex.litan",
					"match": "\\b0x([0-9]|[a-f])*\\b"
				}
			]
		},
		"entity" : {
			"patterns": [
				{

					"name" : "entity.name.function.litan",
					"match" : "(\\w)+(\\s|\\r)*(?=\\()"
				}
			]
		},
		"strings": {
			"name": "string.quoted.litan",
			"begin": "\"|'",
			"end": "\"|'",
			"patterns": [
				{
					"name": "constant.character.escape.litan",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.ltn"
}